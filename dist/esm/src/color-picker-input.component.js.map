{"version":3,"sources":["../../../src/color-picker-input.component.ts"],"names":[],"mappings":"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","file":"color-picker-input.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport {  NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\n\n\nexport class ColorPickerInputComponent implements OnInit, ControlValueAccessor {\n\n     name: string;\n     id: string;\n     cpToggle: boolean;\n     cpToggleChange = new EventEmitter<boolean>(true);\n     cpPosition: string = 'right';\n     cpPositionOffset: string = '0%';\n     cpPositionRelativeToArrow: boolean = false;\n     cpOutputFormat: string = 'hex';\n     cpPresetLabel: string = 'Preset colors';\n     cpPresetColors: Array<string>;\n     cpCancelButton: boolean = false;\n     cpCancelButtonClass: string = 'cp-cancel-button-class';\n     cpCancelButtonText: string = 'Cancel';\n     cpOKButton: boolean = false;\n     cpOKButtonClass: string = 'cp-ok-button-class';\n     cpOKButtonText: string = 'OK';\n     cpFallbackColor: string = '#fff';\n     cpHeight: string = 'auto';\n     cpWidth: string = '230px';\n     cpIgnoredElements: any = [];\n     cpDialogDisplay: string = 'popup';\n     cpSaveClickOutside: boolean = true;\n     cpAlphaChannel: string = 'hex6';\n     required: Boolean;\n     itemClass: string =\"color-picker\";\n    _value: any;\n    _disabled: any;\n\n    set value(val: any) {\n        this._value = val;\n        this.onModelChange(val);\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    \n    get disabled() { return this._disabled; }\n    set disabled(value: any) {\n        this._disabled = value;\n    }\n\n\n    constructor() { }\n\n    ngOnInit() { }\n\n    onModelChange: Function = () => { };\n\n    onModelTouched: Function = () => { };\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    writeValue(val: any): void {\n        this.value = val;\n    }\n\n\n    colorPickerChange(color:any)\n    {\n         this.onModelChange(color);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'narik-color-input',\n    styles: [`\n    .color-picker \n    {  border: black solid 1px;\n    border-radius: 5px;\n    width: 30px;\n    height: 20px;\n    display: block;\n    margin-bottom: 30px;\n    cursor: pointer; }`],\n    template: `<input [(colorPicker)]=\"value\"\n                        [required]=\"required\"\n                       [cpOutputFormat]=\"cpOutputFormat\" \n                        [cpToggle]=\"cpToggle\"\n                        (cpToggleChange)=\"cpToggleChange\"\n                        [cpPosition]=\"cpPosition\"\n                        [cpPositionRelativeToArrow]=\"cpPositionRelativeToArrow\"\n                        [cpPresetLabel]=\"cpPresetLabel\"\n                        [cpPresetColors]=\"cpPresetColors\"\n                        [cpCancelButton]=\"cpCancelButton\"\n                        [cpCancelButtonClass]=\"cpCancelButtonClass\"\n                        [cpCancelButtonText]=\"cpCancelButtonText\"\n                        [cpOKButton]=\"cpOKButton\"\n                        [cpOKButtonClass]=\"cpOKButtonClass\"\n                        [cpOKButtonText]=\"cpOKButtonText\"\n                        [cpFallbackColor]=\"cpFallbackColor\"\n                        [cpHeight]=\"cpHeight\"\n                        [cpWidth]=\"cpWidth\"\n                        [cpDialogDisplay]=\"cpDialogDisplay\"\n                        [cpSaveClickOutside]=\"cpSaveClickOutside\"\n                        [cpAlphaChannel]=\"cpAlphaChannel\"\n                        [ngClass]=\"itemClass\"\n                      readonly\n                       name=\"name\"\n                       id=\"id\"\n                       (colorPickerChange)=\"colorPickerChange\"\n                       [cpPosition]=\"cpPosition\"\n                       [style.background]=\"value\" />`,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR, useExisting:\n        forwardRef(() => ColorPickerInputComponent),\n        multi: true\n    }]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['name', ] },],\n'id': [{ type: Input, args: ['id', ] },],\n'cpToggle': [{ type: Input, args: ['cpToggle', ] },],\n'cpToggleChange': [{ type: Output, args: ['cpToggleChange', ] },],\n'cpPosition': [{ type: Input, args: ['cpPosition', ] },],\n'cpPositionOffset': [{ type: Input, args: ['cpPositionOffset', ] },],\n'cpPositionRelativeToArrow': [{ type: Input, args: ['cpPositionRelativeToArrow', ] },],\n'cpOutputFormat': [{ type: Input, args: ['cpOutputFormat', ] },],\n'cpPresetLabel': [{ type: Input, args: ['cpPresetLabel', ] },],\n'cpPresetColors': [{ type: Input, args: ['cpPresetColors', ] },],\n'cpCancelButton': [{ type: Input, args: ['cpCancelButton', ] },],\n'cpCancelButtonClass': [{ type: Input, args: ['cpCancelButtonClass', ] },],\n'cpCancelButtonText': [{ type: Input, args: ['cpCancelButtonText', ] },],\n'cpOKButton': [{ type: Input, args: ['cpOKButton', ] },],\n'cpOKButtonClass': [{ type: Input, args: ['cpOKButtonClass', ] },],\n'cpOKButtonText': [{ type: Input, args: ['cpOKButtonText', ] },],\n'cpFallbackColor': [{ type: Input, args: ['cpFallbackColor', ] },],\n'cpHeight': [{ type: Input, args: ['cpHeight', ] },],\n'cpWidth': [{ type: Input, args: ['cpWidth', ] },],\n'cpIgnoredElements': [{ type: Input, args: ['cpIgnoredElements', ] },],\n'cpDialogDisplay': [{ type: Input, args: ['cpDialogDisplay', ] },],\n'cpSaveClickOutside': [{ type: Input, args: ['cpSaveClickOutside', ] },],\n'cpAlphaChannel': [{ type: Input, args: ['cpAlphaChannel', ] },],\n'required': [{ type: Input },],\n'itemClass': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}